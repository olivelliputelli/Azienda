@page "/gestionedipartimenti"
@inject HttpClient Http

<PageTitle>Dipartimenti</PageTitle>

<h3>Gestione Dipartimenti</h3>

<EditForm Model="newEditDipartimento" OnValidSubmit="AddEditDipartimento">
    <DataAnnotationsValidator />
    <ValidationSummary />
    Dipartimento: <InputText @bind-Value=newEditDipartimento.Nome />
    Sigla provincia: <InputText @bind-Value=newEditDipartimento.Provincia />
    <button type="submit">@(isAdd ? "Aggiungi" : "Salva Modifiche")</button>
</EditForm>

@if (dipartimenti == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Provincia</th>
                <th>Operazione</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in dipartimenti)
            {
                <tr>
                    <td>@item.Nome</td>
                    <td>@item.Provincia</td>
                    <td>
                        <button class="btn btn-warning"
                        @onclick="@(async () => EditItem(item.DipartimentoId))">
                            Modifica
                        </button>
                        <button class="btn btn-danger"
                        @onclick="@(async () => await DeleteDipartimento(item.DipartimentoId))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isAdd = true;
    private const string ServiceEndpoint = "https://localhost:7231/api/dipartimenti";
    private List<Dipartimento> dipartimenti = new();
    private Dipartimento newEditDipartimento = new();

    private async Task AddEditDipartimento()
    {
        if (isAdd)
        {
            await Http.PostAsJsonAsync<Dipartimento>(ServiceEndpoint, newEditDipartimento);
        }
        else
        {
            await Http.PutAsJsonAsync<Dipartimento>($"{ServiceEndpoint}/{newEditDipartimento.DipartimentoId}", newEditDipartimento);
        }
        isAdd = true;
        newEditDipartimento = new();
        await LoadDipartimenti();
    }

    private void EditItem(int id)
    {
        if (dipartimenti is not null)
        {
            newEditDipartimento = dipartimenti.Single(i => i.DipartimentoId == id);
            isAdd = false;
        }
    }


    private async Task DeleteDipartimento(int id)
    {
        await Http.DeleteAsync($"{ServiceEndpoint}/{id}");
        await LoadDipartimenti();
    }

    protected override async Task OnInitializedAsync() => await LoadDipartimenti();

    private async Task LoadDipartimenti() =>
     dipartimenti = await Http.GetFromJsonAsync<List<Dipartimento>>("https://localhost:7231/api/dipartimenti");
}
